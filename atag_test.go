package atag

import "testing"
import "bytes"
import "bufio"

var data []byte

func Init() {
	data = []byte{0x5c, 0x5c, 0xdd, 0xdd, 0xdd, 0xde, 0xde, 0xde, 0x5f, 0x5f, 0x5f, 0xc0, 0xc0, 0xc0, 0x41, 0x6, 0x41, 0x82, 0x60, 0x20, 0x1, 0x21, 0xf1, 0xd1, 0xa8, 0x3, 0x6, 0x41, 0x6, 0x41, 0x82, 0x60, 0x20, 0x10, 0x21, 0x1, 0x62, 0x3, 0x37, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2a, 0x80, 0x0, 0x0, 0x0, 0x0, 0xf4, 0xc0, 0x3, 0x6, 0x42, 0x42, 0x42, 0xc3, 0xc3, 0xc3, 0x44, 0x44, 0x44, 0xc5, 0xc5, 0xc5, 0xc6, 0xc6, 0xc6, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x41, 0x6, 0x41, 0x82, 0x60, 0x20, 0x1, 0x21, 0xf3, 0xc3, 0x8b, 0x3, 0x6, 0x41, 0x6, 0x41, 0x82, 0x60, 0x10, 0x1, 0x21, 0x9, 0xe4, 0x9f, 0x3, 0x6, 0x82, 0x41, 0x20, 0x9, 0x21, 0x3, 0x38, 0x2e, 0x3d, 0x7, 0x7f, 0x10, 0x5b, 0x37, 0xed, 0xa, 0x3, 0x41, 0x6, 0x41, 0x82, 0x60, 0x20, 0x1, 0x21, 0xf4, 0x7c, 0xff, 0x3, 0x6, 0x41, 0x6, 0x41, 0x82, 0x60, 0x10, 0x1, 0x21, 0x9, 0xe4, 0x9f, 0x3, 0x6, 0x82, 0x41, 0x20, 0x9, 0x21, 0x4, 0x10, 0x7c, 0xf8, 0xdf, 0x6, 0xd5, 0x3, 0x80, 0xd6, 0xc7, 0x3, 0x41, 0x6, 0x41, 0x82, 0x60, 0x20, 0x1, 0x21, 0xf5, 0xf5, 0xee, 0x3, 0x6, 0x41, 0x6, 0x41, 0x82, 0x60, 0x10, 0x1, 0x21, 0x9, 0xe4, 0x9f, 0x3, 0x6, 0x82, 0x41, 0x20, 0x9, 0x21, 0x5, 0x19, 0x2a, 0x5b, 0x12, 0x5c, 0x12, 0x4e, 0x4, 0x83, 0xc, 0x3, 0x41, 0x6, 0x41, 0x82, 0x60, 0x20, 0x1, 0x21, 0xf6, 0x6e, 0xdc, 0x3, 0x6, 0x41, 0x6, 0x41, 0x82, 0x60, 0x10, 0x1, 0x21, 0x9, 0xe4, 0x9f, 0x3, 0x6, 0x82, 0x41, 0x20, 0x9, 0x21, 0x6, 0x4c, 0xff, 0x40, 0x2, 0x6, 0xff, 0xe6, 0x15, 0x99, 0x33, 0x3, 0x41, 0x6, 0x41, 0x82, 0x60, 0x20, 0x1, 0x21, 0xf7, 0xe7, 0xcd, 0x3, 0x6, 0x41, 0x6, 0x41, 0x82, 0x60, 0x10, 0x1, 0x21, 0x9, 0xe4, 0x9f, 0x3, 0x6, 0x82, 0x41, 0x20, 0x9, 0x21, 0x7, 0xc8, 0xc8, 0x3c, 0xf, 0x44, 0x14, 0x1f, 0x6, 0x47, 0xbc, 0x3, 0x41, 0x6, 0x41, 0x82, 0x60, 0x20, 0x1, 0x21, 0xf8, 0x10, 0x35, 0x3, 0x6, 0x41, 0x6, 0x41, 0x82, 0x60, 0x10, 0x1, 0x21, 0x9, 0xe4, 0x9f, 0x3, 0x6, 0x82, 0x41, 0x20, 0x9, 0x21, 0x8, 0x2a, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x11, 0x4d, 0x3, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0xc5, 0xc5, 0xc5, 0xc5, 0xc5, 0xc5, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x50, 0x50, 0x50, 0x60, 0x60, 0x60, 0x1d, 0x1d, 0x1d, 0x9f, 0x9f, 0x9f, 0xc0, 0xc0, 0xc0, 0xd1, 0xd1, 0xd1, 0xd2, 0xd2, 0xd2, 0x53, 0x53, 0x53, 0xd4, 0xd4, 0xd4, 0x55, 0x55, 0x55, 0x56, 0x56, 0x56, 0xd7, 0xd7, 0xd7, 0xd8, 0xd8, 0xd8, 0x59, 0x59, 0x59, 0x5a, 0x5a, 0x5a, 0xdb, 0xdb, 0xdb, 0x5c, 0x5c, 0x5c, 0xdd, 0xdd, 0xdd, 0xde, 0xde, 0xde, 0x5f, 0x5f, 0x5f, 0xc0, 0xc0, 0xc0, 0x41, 0x6, 0x41, 0x82, 0x60, 0x20, 0x1, 0x21, 0xf1, 0xd1, 0xa8, 0x3, 0x6, 0x41, 0x6, 0x41, 0x82, 0x60, 0x20, 0x10, 0x21, 0x1, 0x62, 0x3, 0x37, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2a, 0x80, 0x0, 0x0, 0x0, 0x0, 0xf4, 0xc0, 0x3, 0x6, 0x42, 0x42, 0x42, 0xc3, 0xc3, 0xc3, 0x44, 0x44, 0x44, 0xc5, 0xc5, 0xc5, 0xc6, 0xc6, 0xc6, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x41, 0x6, 0x41, 0x82, 0x60, 0x20, 0x1, 0x21, 0xf3, 0xc3, 0x8b, 0x3, 0x6, 0x41, 0x6, 0x41, 0x82, 0x60, 0x10, 0x1, 0x21, 0x9, 0xe4, 0x9f, 0x3, 0x6, 0x82, 0x41, 0x20, 0x9, 0x21, 0x3, 0x38, 0x2e, 0x3d, 0x7, 0x7f, 0x10, 0xc7, 0x37, 0x10, 0xba, 0x3, 0x41, 0x6, 0x41, 0x82, 0x60, 0x20, 0x1, 0x21, 0xf4, 0x7c, 0xff, 0x3, 0x6, 0x41, 0x6, 0x41, 0x82, 0x60, 0x10, 0x1, 0x21, 0x9, 0xe4, 0x9f, 0x3, 0x6, 0x82, 0x41, 0x20, 0x9, 0x21, 0x4, 0x10, 0x7c, 0xf8, 0xdf, 0x6, 0xb6, 0x3, 0x80, 0xff, 0x2d, 0x3, 0x41, 0x6, 0x41, 0x82, 0x60, 0x20, 0x1, 0x21, 0xf5, 0xf5, 0xee, 0x3, 0x6, 0x41, 0x6, 0x41, 0x82, 0x60, 0x10, 0x1, 0x21, 0x9, 0xe4, 0x9f, 0x3, 0x6, 0x82, 0x41, 0x20, 0x9, 0x21, 0x5, 0x19, 0x2a, 0x5b, 0x12, 0x5c, 0x12, 0x4e, 0x4, 0x83, 0xc, 0x3, 0x41, 0x6, 0x41, 0x82, 0x60, 0x20, 0x1, 0x21, 0xf6, 0x6e, 0xdc, 0x3, 0x6, 0x41, 0x6, 0x41, 0x82, 0x60, 0x10, 0x1, 0x21, 0x9, 0xe4, 0x9f, 0x3, 0x6, 0x82, 0x41, 0x20, 0x9, 0x21, 0x6, 0x4c, 0xff, 0x40, 0x2, 0x6, 0xff, 0xe6, 0x15, 0x99, 0x33, 0x3, 0x41, 0x41, 0x6, 0x41, 0x82, 0x60, 0x20, 0x1, 0x21, 0xf7, 0xe7, 0xcd, 0x3, 0x6, 0x41, 0x6, 0x41, 0x82, 0x60, 0x10, 0x1, 0x21, 0x9, 0xe4, 0x9f, 0x3, 0x6, 0x82, 0x41, 0x20, 0x1, 0x21, 0xff, 0x7a, 0x2a, 0x3, 0x41, 0x6, 0x41, 0x82, 0x60, 0x20, 0x1, 0x21, 0xf7, 0xe7, 0xcd, 0x3, 0x6, 0x41, 0x6, 0x41, 0x82, 0x60, 0x10, 0x1, 0x21, 0x9, 0xe4, 0x9f, 0x3, 0x6, 0x82, 0x41, 0x20, 0x9, 0x21, 0x7, 0xc8, 0xc8, 0x3c, 0xf, 0x44, 0x14, 0x1f, 0x6, 0x47, 0xbc, 0x3, 0x41, 0x6, 0x41, 0x82, 0x60, 0x20, 0x1, 0x21, 0xf8, 0x10, 0x35, 0x3, 0x6, 0x41, 0x6, 0x41, 0x82, 0x60, 0x10, 0x1, 0x21, 0x9, 0xe4, 0x9f, 0x3, 0x6, 0x82, 0x41, 0x20, 0x9, 0x21, 0x8, 0x2a, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x11, 0x4d, 0x3, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0xc5, 0xc5, 0xc5, 0xc5, 0xc5, 0xc5, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x50, 0x50, 0x50, 0x60, 0x60, 0x60, 0x1d, 0x1d, 0x1d, 0x9f, 0x9f, 0x9f, 0xc0, 0xc0, 0xc0, 0xd1, 0xd1, 0xd1, 0xd2, 0xd2, 0xd2, 0x53, 0x53, 0x53, 0xd4, 0xd4, 0xd4, 0x55, 0x55, 0x55, 0x56, 0x56, 0x56, 0xd7, 0xd7, 0xd7, 0xd8, 0xd8, 0xd8, 0x59, 0x59, 0x59, 0x5a, 0x5a, 0x5a, 0xdb, 0xdb, 0xdb, 0x5c, 0x5c, 0x5c, 0xdd, 0xdd, 0xdd, 0xde, 0xde, 0xde, 0x5f, 0x5f, 0x5f, 0xc0, 0xc0, 0xc0, 0x41, 0x6, 0x41, 0x82, 0x60, 0x20, 0x1, 0x21, 0xf1, 0xd1, 0xa8, 0x3, 0x6, 0x41, 0x6, 0x41, 0x82, 0x60, 0x20, 0x10, 0x21, 0x1, 0x62, 0x3, 0x37, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2a, 0x80, 0x0, 0x0, 0x0, 0x0, 0xf4, 0xc0, 0x3, 0x6, 0x42, 0x42, 0x42, 0xc3, 0xc3, 0xc3, 0x44, 0x44, 0x44, 0xc5, 0xc5, 0xc5, 0xc6, 0xc6, 0xc6, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x41, 0x6, 0x41, 0x82, 0x60, 0x20, 0x1, 0x21, 0xf3, 0xc3, 0x8b, 0x3, 0x6, 0x41, 0x6, 0x41, 0x82, 0x60, 0x10, 0x1, 0x21, 0x9, 0xe4, 0x9f, 0x3, 0x6, 0x82, 0x41, 0x20, 0x9, 0x21, 0x3, 0x38, 0x2f, 0x3d, 0x7, 0x7f, 0x11, 0x3a}
}

func TestFrameSplit(t *testing.T) {
	r := bytes.NewReader(data)
	scanner := bufio.NewScanner(r)
	scanner.Split(SplitFrames)

	frames := [][]byte{}
	for scanner.Scan() {
		frames = append(frames, scanner.Bytes())
	}

	if len(frames) != 1 {
		t.Errorf("invalid nr of frames: %d", len(frames))
	}
}
